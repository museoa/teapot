






                                    [1mTeapot User guide[0m
                            [4mMichael[24m [4mHaardt[24m [4m(michael@moria.de)[0m


                                        [4mABSTRACT[0m


            For ages, spread sheet programs have been closely associated with
            financial calculations done by typical  end-users.   But  it  has
            shown  that  there  is  also hacker's work which can be done with
            them, like calculate monitor  timings  for  various  resolutions,
            produce  convincing  time  statistics  which  justify the lack of
            documentation or the need for a budget increase to your employer.
            This  first  part  of  this  user  guide explains how the various
            functions of teapot are used, whereas the second  part  gives  an
            introduction   to  spread  sheets  and  explains  the  expression
            evaluator and its functions.





       [1m1.  Copyright and usage conditions[0m

       [1mteapot [22m(Table Editor And Planner, Or: Teapot1), is copyright (c) by Michael
       Haardt,  1995  -  2006  and  copyright (c) by Joerg Walter, 2009-2010.  The
       implementation of clocked expressions is modelled after the description  of
       clocked    evaluation    in    the   PhD   work   of   J√∂rg   Wittenberger
       <joerg.wittenberger@inf.tu-dresden.de> at the University of  Technology  in
       Dresden,  Germany.   The  German  message  catalog was contributed by Guido
       M√ºsch, the Dutch catalog by Wim van Dorst <baron@clifton.hobby.nl> and the
       Ukrainian  catalog  by  Volodymyr  M.  Lisivka <lvm@mystery.lviv.net>.  The
       trigonometric   functions   were   inspired    by    Koniorczyk    M√°ty√°s
       <kmatyas@cs.elte.hu>.   The  context output format was contributed by Marko
       Schuetz <MarkoSchuetz@web.de>.

       This program is free software: you can redistribute  it  and/or  modify  it
       under  the terms of the GNU General Public License as published by the Free
       Software Foundation, either version 3 of the License, or (at  your  option)
       any later version.

       This program is distributed in the hope that it will be useful, but WITHOUT
       ANY WARRANTY; without even  the  implied  warranty  of  MERCHANTABILITY  or
       FITNESS  FOR  A PARTICULAR PURPOSE.  See the GNU General Public License for
       more details.

       ____________________

       1. Back then, around 1992, all IRC servers supported [1m/wallop[22m.  If you  were
          bored,  not  knowing what to do and it was just too silent and peaceful,
          sending a [1m/wallop pineapple [22mor [1m/wallop teapot [22mwas an  effective  way  to
          start a silly but entertaining operator conversation.  The fact that the
          first versions of this program were unnamed, because I had no  idea  how
          to  call  it  and  because  all  suggestions  sounded  boring,  is  pure
          coincidence.  :)







                                          - 2 -



       You should have received a copy of the GNU  General  Public  License  along
       with this program.  If not, see <http://www.gnu.org/licenses/>.


       [1m2.  Introduction to spread sheets[0m



       [1m2.1  General introduction[0m

       A spread sheet consists of cells formed by rows and columns.  Additionally,
       in many spread sheets you have a third dimension, which you can imagine  as
       various sheets laying on top of each other.  The third dimension allows you
       to hide intermediate results, show you additional results you do  not  want
       to  appear in the ``official'' tables, keep sheets per time period (like 12
       sheets for each month in a year) while allowing you  to  make  calculations
       over  the  entire  time interval and much more.  The figure below shows the
       three dimensions:


                                                         _.
                    +-----+-----+-----+-----+-----+      /|  z
                  +-----+-----+-----+-----+-----+ |     /
                +-----+-----+-----+-----+-----+ |-+    +------------->  x
                |     |     |     |     |     |-+ |    |
                +-----+-----+-----+-----+-----+ |-+    |
                |     |     |     |     |     |-+ |    |
                +-----+-----+-----+-----+-----+ |-+    |
                |     |     |     |     |     |-+ |    |
                +-----+-----+-----+-----+-----+ |-+    |
                |     |     |     |     |     |-+      |
                +-----+-----+-----+-----+-----+        v  y

       You can think of cells as  variables,  which  value  is  the  value  of  an
       associated  expression.   The  expression may be constant, like 1.23, or it
       may be a function of other  cell  values.   The  advantage  compared  to  a
       programmable  calculator  is  that if you change a number, you directly see
       all changes in other cells caused by that.  Often this allows you to get  a
       feeling  how  much you may change basic sizes with still getting satisfying
       results without having to solve the problem analytically.

       Spread sheets offer many editing functions in order to modify, clear,  copy
       and  move  cells  or  blocks  of  cells.   Besides  the  usual mathematical
       functions, there  are  functions  which  work  on  blocks  of  cells,  like
       calculating the sum of a block or counting all non-empty elements.  Further
       there are functions working on character strings, because most  likely  you
       also  want  text  besides  numbers.  The next section will introduce you to
       some of these by examples.

       teapot is a traditional spread sheet and a typical UNIX program, because it
       does  just  one  thing:  Calculations.   It  does  not include any graphics
       functions and never will, but it allows to export data in many formats,  so
       you can use your favourite graphics software.









                                          - 3 -



       [1m2.2  The first steps[0m

       Now  that  you should have an idea, it is probably a good time to make your
       first steps.  This section will show you how to create  and  save  a  sheet
       which  contains two numbers and their sum.  If your system supports message
       catalogs, please make sure that [1mNLSPATH [22mand  the  [1mLC_*  [22mvariables  are  set
       right for your locale.  Now start the program without any arguments:

            [1mteapot[0m

       You see an empty sheet with the cell cursor being at the upper left corner.
       Further, the status line tells you that this cell is really empty:

            [1mE @(0,0,0)=[0m

       The [1mE [22mmeans that you can edit the sheet.  A [1mV [22mwould  mean  that  you  could
       only  view  its  contents.  The meaning of [1m@() [22mwill be explained soon.  You
       are now in the command mode of teapot.  Now type return to edit this  cell.
       A  complete  list  of command mode functions will be given later.  A prompt
       will appear below the status line:

            [1mCell contents: 1[0m

       Now the cell at position 0,0,0 has the integer constant 1.  The status line
       shows you the cell contents, whereas in the sheet you see its value.  Since
       constants are identical with their values, both are 1.  Now move  the  cell
       cursor down one row and edit that cell, giving it the integer constant [1m41[22m.

       Now  that you have two numbers, move the cell cursor to cell 0,2,0 and give
       that cell the following contents:

            [1mCell contents: @(0,0,0)+@(0,1,0)[0m

       If you were confused about the difference between contents and value  of  a
       cell,  it should become more clear now: The status line shows the contents,
       which is the arithmetic expression to  calculate  the  sum  of  two  cells,
       whereas in the sheet you see the value of that expression: 42, which was to
       be expected.  [1m@([4m[22mx[24m[1m,[4m[22my[24m[1m,[4m[22mz[24m[1m) [22mis a function  which  takes  three  coordinates  and
       returns the value of the cell at the given position.

       As  you  can  see,  the  arithmetic expression is not too readable.  If you
       would move cells around, it would  not  even  work  any  more.   For  these
       reasons,  you can use symbolic names instead of coordinates, called labels.
       When used in an expression, a label is like a pointer to a cell,  its  data
       type  is [4mlocation[24m.  Move to cell 0,0,0 and use [1m/ [22m(slash) in command mode to
       get into the main menu.  Depending on your screen size, you may not see all
       of  it.  In this case, move the highlighted block right (or left) to scroll
       through it  and  to  see  all  items.   Now  change  its  label  attribute:
       A)ttributes, L)abel:

            [1mCell label: Paper[0m

       Then go one cell down and change its label to [1mTapes[22m.  After, move again one
       cell down and change the expression to:








                                          - 4 -



            [1mCell contents: @(Paper)+@(Tapes)[0m

       As you see, you can call the function [1m@ [22mwith three integer values  or  with
       one location value.  Now the expression is more understandable, at least to
       you.  To someone else, the sheet only contained three numbers, so a  little
       text  should  be  added.   To  accomplish  that,  a  new column needs to be
       inserted: B)lock, I)insert, C)olumn, W)hole column.   The  last  menu  item
       means  that  you  want  to  insert  a  whole new column, not only a partial
       column.  If you move the cursor around, you will  see  that  everything  is
       still fine, because you used labels.  Go to cell 0,0,0 and edit it:

            [1mCell contents: "Paper:"[0m

       This  is  how you enter strings.  A string is a data type on its own, don't
       confuse this with labels.  If you feel like it, leave the  quotes  and  the
       colon away, and you will see the difference, because the result will not be
       a string, but the value of the label [1mPaper[22m, which is [1m&(1,0,0)[22m.  Now  change
       the  cells  below  to  [1m"Tapes:"  [22mand  [1m"Result:"[22m.  This is something that is
       understandable to others, too.

       As the last step, save your work sheet to a file: F)ile, X)DR.  The  native
       file  format  is XDR, so chose that.  Up to now, your sheet does not have a
       name, so you will be prompted for one:

            [1mSave sheet to XDR file: first_step[0m

       Unless you see an error message after, your sheet is written to a file.

       If you have come  this  far,  quit  (from  the  main  menu)  and  you  have
       successfully  completed  your  first  steps  on using teapot.2 Now you know
       cells, the difference between contents and values, you learned that  labels
       are a good thing and you can do simple cell modifications as well as saving
       your work.  This is enough for  most  applications.   If  the  capabilities
       described  in  the  next  section confuse you, then it is unlikely that you
       need them really.  Just skip that section and don't worry about it.

       You may wonder what happens if you have  circular  dependencies,  i.e.  you
       have a cell which evaluates to its own value plus one.  Well, the answer is
       that it depends on the order in which you create this cell.  If  you  first
       give  it  the  value  1  and  after edit it to contain the expression which
       refers to itself plus 1, then you will find that each  recalculation,  like
       after  editing  other  cells,  will  increase the value.  While this may be
       funny, it is certainly not useful as you can not reset  the  cell  and  you
       have little control of its development.

       What you really want is a base value and an iterative expression along with
       a way to control the recalculations.  teapot supports this by allowing  two
       expressions  per  cell.   The expressions you have used so far are the ones
       which evaluate to the base values.  Each time you edit a  cell,  the  whole
       sheet  will  be  reset, which means that all results are recalculated using
       the base values.  After,  you  can  clock  the  sheet,  which  is  why  the

       ____________________

       2. It may be a good idea to make and enjoy some tea at this point.  :)







                                          - 5 -



       iterative  part  is  also  called clocked expression.  A clock is an atomic
       operation, which means that all cell results will be recalculated in a  way
       that  the  new  result  will  only show after the entire recalculation.  An
       examples will demonstrate how to make use of this feature.  The notation  [4mx[0m
       ->  [4my[24m  means that [4mx[24m is the base expression and [4my[24m is the clocked expression.
       Don't let this confuse you, as both are entered separately: teapot does not
       have  an  ->  operator,  but  it  displays  the  cell contents this way for
       increased overview.  So, give the cell a base expression of [1m1 [22mand a clocked
       expression of [1m@(0,0,0)+1 [22m(using [1mESC-Enter [22mor [1mMeta-Enter[22m) and you will see:

            [1m@(0,0,0)=1 -> @(0,0,0)+1[0m

       The  sheet  is currently in reset condition and the result is 1.  Now clock
       it and you will see how the value increases.

       After this introductional chapter, you should be familiar  with  the  basic
       concepts  in  spread  sheets.   The  next  chapters  explain  all functions
       available in detail.  You should read  them  to  get  an  overview  of  the
       possibilities  offered  by  teapot.   Finally,  we  will come back to using
       teapot by showing some common problems and their solutions.


       [1m3.  The command mode[0m

       Right after starting teapot, you are in the command mode.   Many  functions
       from  the  command  mode  are also available from menues, but using keys is
       faster and some things, like moving the cell  cursor,  are  only  available
       through keys.  The command mode accepts:

            +--------------+----------------+-------------------------------+
            |Function key  | ASCII key      | function                      |
            +--------------+----------------+-------------------------------+
            |Next line     | ^n             | cursor down                   |
            +--------------+----------------+-------------------------------+
            |Previous line | ^p             | cursor up                     |
            +--------------+----------------+-------------------------------+
            |Begin         | ^a             | cursor to column 0            |
            +--------------+----------------+-------------------------------+
            |End           | ^e             | cursor to last column         |
            +--------------+----------------+-------------------------------+
            |              | +              | cursor to next layer          |
            +--------------+----------------+-------------------------------+
            |              | -              | cursor to previous layer      |
            +--------------+----------------+-------------------------------+
            |              | <              | cursor to line 0              |
            +--------------+----------------+-------------------------------+
            |              | >              | cursor to last line           |
            +--------------+----------------+-------------------------------+
            |              | _              | cursor to sheet 0             |
            +--------------+----------------+-------------------------------+
            |              | *              | cursor to last sheet          |
            +--------------+----------------+-------------------------------+










                                          - 6 -



            +--------------+----------------+-------------------------------+
            |Function key  | ASCII key      | function                      |
            +--------------+----------------+-------------------------------+
            |              | ^x <           | one page left                 |
            +--------------+----------------+-------------------------------+
            |              | ^x >           | one page right                |
            +--------------+----------------+-------------------------------+
            |F10           | /              | main menu                     |
            +--------------+----------------+-------------------------------+
            |F2            |                | save menu                     |
            +--------------+----------------+-------------------------------+
            |F3            |                | load menu                     |
            +--------------+----------------+-------------------------------+
            |              | ^x ^r          | load in native format         |
            +--------------+----------------+-------------------------------+
            |Enter         | ^j, ^m         | edit cell contents            |
            +--------------+----------------+-------------------------------+
            |              | ", @, [4mdigit[24m    | overwrite cell contents       |
            +--------------+----------------+-------------------------------+
            |ESC Enter     | ESC ^j, ESC ^m | edit clocked cell contents    |
            +--------------+----------------+-------------------------------+
            |Backspace     | ^h             | edit cell contents            |
            +--------------+----------------+-------------------------------+
            |              | .              | mark blocks (see below)       |
            +--------------+----------------+-------------------------------+
            |              | ^l             | redraw screen                 |
            +--------------+----------------+-------------------------------+
            |              | ^y             | paste (reinsert marked) block |
            +--------------+----------------+-------------------------------+
            |              | ^r             | reset sheet                   |
            +--------------+----------------+-------------------------------+
            |              | ^s             | clock sheet                   |
            +--------------+----------------+-------------------------------+
            |              | ESC z          | save and quit                 |
            +--------------+----------------+-------------------------------+
            |              | ^x ^c          | quit                          |
            +--------------+----------------+-------------------------------+
            |Next page     | ^v             | one page down                 |
            +--------------+----------------+-------------------------------+
            |Previous page | ESC v          | one page up                   |
            +--------------+----------------+-------------------------------+
            |Cancel        | ^g, ^c         | abort current action          |
            +--------------+----------------+-------------------------------+
       .  (dot)  marks  blocks:  The first time it marks the beginning of a block,
       which is then extended by moving the cell cursor.  The next time, it  marks
       the  end  of  the  block  which lets you move the cell cursor after without
       changing the block.  The third time, it removes the block marks again.


       [1m4.  The line editor[0m

       Many functions in teapot require editing a line of text, e.g. editing  cell
       contents, typing file names and the line.  Similar to the command mode, all
       things can be reached by control codes and most by function keys.  The line








                                          - 7 -



       editor accepts:

              +-------------------+-----------+----------------------------+
              |Function key       | ASCII key | function                   |
              +-------------------+-----------+----------------------------+
              |Previous character | ^p        | go to previous line        |
              +-------------------+-----------+----------------------------+
              |Forward character  | ^f        | move cursor right          |
              +-------------------+-----------+----------------------------+
              |Begin              | ^a        | move cursor to column 0    |
              +-------------------+-----------+----------------------------+
              |End                | ^e        | move cursor to last column |
              +-------------------+-----------+----------------------------+
              |Enter              | ^j, ^m    | finish editing             |
              +-------------------+-----------+----------------------------+
              |                   | ^l        | redraw screen              |
              +-------------------+-----------+----------------------------+
              |                   | ^t        | transpose character        |
              +-------------------+-----------+----------------------------+
              |                   | ^\        | goto matching paren        |
              +-------------------+-----------+----------------------------+
              |Cancel             | ^g, ^c    | abort editing              |
              +-------------------+-----------+----------------------------+
              |Backspace          | ^h        | delete previous character  |
              +-------------------+-----------+----------------------------+
              |Delete             | ^?, ^d    | delete current character   |
              +-------------------+-----------+----------------------------+
              |Insert             |           | toggle insert mode         |
              +-------------------+-----------+----------------------------+
       Besides  the regular line editor functions as explained previously, you may
       use ^o to temporarily leave the editor in order to move around in the sheet
       if  you  are editing cell contents.  Another ^o brings you back to the line
       editor.  While moving around in the sheet, you can insert the value (v)  or
       position (p) at the cursor position in the edited cell.

       Aborting  line  editing means that you will get right back to command mode,
       whatever you started doing will have no effect.


       [1m5.  Interactive functions[0m

       If a block of cells is marked, many interactive functions will  be  applied
       to  all  cells within that block.  Such functions are denoted by * for this
       chapter.

       [1m5.1  Setting the precision[0m

       The precision only changes what is printed, teapot always uses the  maximum
       precision  for  calculations.  It also only affects the output, if the cell
       value is a floating point number.  The precision of printed floating  point
       numbers.  Entering an empty precision means to set it to the default value.

       [1m5.2  Changing the cell label *[0m









                                          - 8 -



       This function lets you edit the cell label of the current cell.  Further it
       changes all occurences of it in the cell contents to the new value,  unless
       you erased the cell label.  If a block has been marked by the time you edit
       the cell label, all occurences of the label in contents of  cells  in  that
       block will be changed.

       [1m5.3  Locking cells *[0m

       You can lock cells to protect them from accidental editing.  Note that this
       protects you from modifying single cells.  If you modify a block  of  cells
       which contains locked cells, those will be modified as well.  This has been
       done because when using block commands,  you  usually  know  what  you  are
       doing.

       [1m5.4  Setting the column width *[0m

       The column width only affects the screen display, not the formatting of the
       final output with the expectation of saved formatted ASCII  files.   It  is
       intended  to let you make better usage of the screen for more overview.  If
       the width is too small to display the cell value, stars will be displayed.

       [1m5.5  Copying or moving a block of cells[0m

       To copy a block of cells, mark it, then move the cell cursor to  where  the
       upper left corner of the copy should be and issue the copy command.  Moving
       works similar, just use the move command.  Of course you  can  mark  three-
       dimensional  blocks  and copy them anywhere in the three-dimensional sheet,
       but doing so requires a good three-dimensional imagination to get what  you
       want.

       [1m5.6  Filling a block of cells[0m

       To  fill a block of cells, first mark a the block it should be filled with.
       This may be just one cell!  Then move the cell cursor to  where  the  upper
       left corner of the block to be filled should be and issue the fill command.
       You will be prompted for how often the marked block should be  repeated  in
       each dimension.  For example, you may to repeat a cell 9 times below.  Mark
       it, then move down one row.  Issue the fill command and  answer  1  to  the
       number of column repetitions, 9 to rows and 1 to layers.

       [1m5.7  Clearing cells *[0m

       Clearing  means  to  delete the cell contents and set all attributes to the
       default value.  If you want to  preserve  the  attributes,  just  edit  the
       contents of a cell and delete them.

       [1m5.8  Insert cells *[0m

       Since  work  sheets  can  be three-dimensional, you can insert cells in all
       three dimensional, too.   The  inserted  cells  will  be  empty  and  their
       attributes  have  the default values.  Cells will always be moved away from
       the front upper left corner to make room for the  inserted  cells.   If  no
       block is marked, you will be asked if you really only want to insert a cell
       of if you want to insert a whole row, line or sheet.








                                          - 9 -



       [1m5.9  Delete cells *[0m

       Deleting works contrary to inserting.  The deleted cells will be filled  by
       moving  neighbour  cells  to their positions.  You will be prompted for the
       direction from where those cells will be taken.  Deleting an entire  column
       column-wise is done by marking the column, use the delete command and chose
       X direction.

       [1m5.10  Sort cells[0m

       Marked blocks of cells can be sorted after one  or  multiple  keys,  either
       column-wise,  row-wise or depth-wise.  Sorting a two dimensional block row-
       wise will sort lines, but if a three dimensional block is sorted  row-wise,
       then horizontal layers will be sorted.  The sort key is specified as vector
       which is  orthogonal  to  the  sorted  elements,  either  in  ascending  or
       descending  order.   The  following  example illustrates the sort function.
       The upper left part of the screen should look like this:

                                     0   0      1
                                       +-------------
                                     0 | 1   "one"
                                     1 | 2   "two"
                                     2 | 3   "three"
                                     3 | 4   "four"


       The box shows you which block to mark.  Now this  block  should  be  sorted
       row-wise,  with the sort key being the numbers in descending order, i.e. we
       want the lines being numbered 4,3,2,1.  Go to the block menu,  then  select
       sort.   Use  [1mR)ow[22m,  because  that is how we want to sort this block.  The X
       position of the sort key vector is 0, because the  column  0  contains  the
       numbers.   The  Z position is 0, too, because those numbers are on sheet 0.
       Now chose [1mD)escending [22mas  direction.   At  this  point,  you  could  add  a
       secondary  key or decide to sort the block by the keys entered so far.  Use
       [1mS)ort region [22mto sort it.  That's it, the screen should look like this now:

                                     0   0      1
                                       +-------------
                                     0 | 4   "four"
                                     1 | 3   "three"
                                     2 | 2   "two"
                                     3 | 1   "one"


       [1m5.11  Mirror cells[0m

       Mirroring a marked  block  of  cells  can  be  done  in  three  directions:
       Left/right, upside/down and front/back.

       [1m5.12  Saving and loading sheets[0m












                                          - 10 -



       [1m5.12.1  Name or rename a sheet[0m
       Occasionally,  you  may want to rename a sheet, like before making critical
       changes or when you load something an existing sheet to have  a  start  for
       making  a  new  one.   This function allows to change the filename which is
       associated with a sheet.

       [1m5.12.2  Save and load in XDR format[0m
       XDR  (eXternal  Data  Representation)  is  a  standard  invented   by   Sun
       Microsystems  which defines a canonical way of storing/transporting data on
       external media.  Its advantage is that it is widely available and  that  it
       defines  a  portable  floating point number format.  The native teapot file
       format uses XDR so it is portable across  different  machine  architectures
       and  operating  systems.   The  advantage  of  this over the portable ASCII
       format is that due to the (usually)  missing  conversion  calculations  any
       floating  point  constants  will be saved/loaded exactly without conversion
       errors.  XDR files have no default extension.

       [1m5.12.3  Save and load in ASCII format[0m
       The ASCII file format allows easy generation/modification of  saved  sheets
       by  shell scripts.  Due to binary/ASCII conversion, there may be conversion
       errors in floating point constants.  The default extension is [1m.asc[22m.

       [1m5.12.4  Save and load in CSV/GCSV format *[0m
       CSV  (comma  seperated  value)  files  only  contain  the  data,  not   the
       expressions  calculating  it.   Many  spread  sheets can generate this file
       format and many graphics programs, like [4mgnuplot[24m(1) can read  it.   PlotPlus
       can  read  it  if you specify [1mFORMAT FREE[22m.  The field separator is a tab or
       comma, strings are preferably but not necessarily enclosed in double quotes
       and  decimal  numbers  have a dot to mark the fractional part.  The default
       extension is [1m.txt[22m.  When loading CSV files, the sheet will not  be  cleared
       and the data will be load relative to the current cursor position.  GCSV is
       the German variation, which uses semicolons for  separating  fields  and  a
       decimal  comma instead of a decimal point.  On load, strings without quotes
       and with a [4m0x[24m prefix followed by hexadecimal digits will  be  converted  to
       integers.

       [1m5.12.5  Load in SC format[0m
       teapot can load simple SC sheets to convert them to teapot's native format.
       While loading, teapot converts all references to absolute cell positions to
       labels.   This  allows to insert and delete in such sheets without screwing
       the whole sheet up.  teapot can not save sheets in SC  format,  because  SC
       lacks  many  features.   For  now,  only  the  most  basic  SC features are
       supported.  The default extension is [1m.sc[22m.

       [1m5.12.6  Load in WK1 format[0m
       teapot can load simple WK1  sheets  to  convert  them  to  teapot's  native
       format.   By  default,  1-2-3  cell  references  are  relative, so don't be
       surprised by a big amount of relative references in  the  resulting  teapot
       sheet.   For  now,  only  the most basic 1-2-3 features are supported.  The
       default extension is [1m.wk1[22m.

       [1m5.12.7  Save in formatted ASCII format *[0m
       The generated formatted ASCII files contain  about  what  you  see  on  the
       screen.   If  your  sheet  has more than one layer, then the various layers








                                          - 11 -



       will be saved separated by form feeds.  The default extension is [1m.doc[22m.

       [1m5.12.8  Save in tbl format *[0m
       teapot can generate [4mtbl[24m(1) table bodies in single files which are  supposed
       to be used like this:

            [1m.TS[0m
            [4moptions[24m[1m;[0m
            [1m.so [4m[22mfilename[0m
            [1m.TE[0m

       You will have to use [4msoelim[24m(1) to eliminate the [1m.so [22mrequests before the tbl
       run.  The [4moptions[24m[1m; [22mare optional.  If you use GNU roff,  you  will  need  to
       eliminate [1m.lf [22mrequests, because this GNU roff extension confuses GNU tbl:

            [1msoelim [4m[22mfile[24m [1m| grep -v '^\.lf'[0m

       Alternatively,  you  can  generate  a  stand-alone document, which needs no
       further operations to format and print.  Note: If no block is  marked,  the
       whole  sheet  will  be  saved,  not  only  the  current  cell.  The default
       extension is [1m.tbl[22m.

       [1m5.12.9  Save in LaTeX format *[0m
       If you generate LaTeX 2e tables  in  single  files,  you  include  them  in
       documents like this:

            [1m\include{[4m[22mfilename[24m[1m}[0m

       Alternatively,  you  can  generate  a  stand-alone document, which needs no
       further operations to format and print.  Note: If no block is  marked,  the
       whole  sheet  will  be  saved,  not  only  the  current  cell.  The default
       extension is [1m.tex[22m.

       [1m5.12.10  Save in HTML format *[0m
       You can generate html table bodies in single files which could be  used  in
       combination  with  server-side  includes.  This feature differs between the
       various servers, so refer to the manual for your web  server  for  details,
       please.

       Alternatively,  you can generate a stand-alone document.  Note: If no block
       is marked, the whole sheet will be saved, not only the current  cell.   The
       default file extension is [1m.html[22m.

       [1m5.13  Go to location[0m

       Sometimes, you directly want to go to a specific position, either to change
       its contents to see which cell  a  location  expression  refers  to.   This
       function  lets  you  enter an expression, which must evaluate to a value of
       the type location.  If so, the cursor is positioned to that location.   For
       example, you could enter [1m&(10,2) [22mto go to cell 10,2 of the current layer or
       you could enter the name of a label you want to go to.  Relative  movements
       are no problem, either.










                                          - 12 -



       [1m5.14  Shell[0m

       Start  a  sub  shell.  Exiting from that sub shell will bring you back into
       teapot.

       [1m5.15  Version information[0m

       teapot will display its version number and other entertaining  things.   :)
       If you send me email, please always write which version you are using.


       [1m6.  Batch functions[0m

       Besides  interactive facilities, teapot has a batch mode.  Using this batch
       mode, shell scripts can generate output from teapot sheets.  This is  handy
       if you use [4mmake[24m(1) to generate a bigger document containing tables, because
       you don't have to generate a tbl or LaTeX file each  time  you  modified  a
       sheet:  make  will  do so.  In batch mode, teapot reads batch commands from
       standard input.  The following commands are available:

       [1mgoto [4m[22mlocation[0m
            Go to the specified [4mlocation[24m.

       [1mfrom [4m[22mlocation[0m
            Start marking a block.

       [1mto [4m[22mlocation[0m
            End marking a block.

       [1msort-x [22md|a [4my[24m [4mz[24m [ d|a [4my[24m [4mz[24m ... ]

       [1msort-y [22md|a [4mx[24m [4mz[24m [ d|a [4mx[24m [4mz[24m ... ]

       [1msort-z [22md|a [4mx[24m [4my[24m [ d|a [4mx[24m [4my[24m ... ]
            Sorts the marked block as described in section [4m5.10[24m, column-wise, row-
            wise or depth-wise, respectivly.  "d" or "a" specify the sort order to
            be descending or ascending.  [4mx[24m, [4my[24m and [4mz[24m specify the  position  of  the
            sort  key [1mrelative [22mto the first cell of the marked block.  Up to eight
            sort keys can be specified.
            This example reproduces the result from [4m5.10[24m:
            echo -e "from  &(1,1,0)\n  to  &(2,4,0)\n  sort-y  d  0  0\n  save-csv
            result_num.txt" \
            | teapot -b doc/unsorted

       [1msave-tbl [4m[22mfile[0m

       [1msave-csv [4m[22mfile[0m

       [1msave-latex [4m[22mfile[0m

       [1msave-context [4m[22mfile[0m

       [1msave-html [4m[22mfile[0m
            Save the marked block in the specified format as [4mfile[24m.








                                          - 13 -



       [1mload-csv [4m[22mfile[0m

       [1mload-gcsv [4m[22mfile[0m
            Load  [4mfile[24m in the specified format to the last [1mgoto [22mlocation.  This is
            the same functionality as the interactive load described in subsection
            [4m5.12.4[24m.


       [1m7.  Cells[0m

       In  this  chapter,  [1mbold [22mmarks literals which have to be entered exactly as
       shown.  [4mItalic[24m mark place holders, they are not to be taken literally.

       [1m7.1  Attributes[0m

       Each cell consists of a base/reset expression, a  clocked  expression,  the
       result  of  one  of these expressions (depending on the cell being reset or
       clocked) and several attributes:

          ∑ A cell label, which is useful because it avoids  to  directly  address
            cells by their position.  A cell label must be different from function
            names.

          ∑ The cell adjustment, which determines if the  cell  value  is  printed
            left adjusted, right adjusted or centered.

          ∑ The precision for the output of floating point values.  The default is
            2 digits after the dot.

          ∑ If floating point numbers should be  printed  in  scientific  notation
            (0.123e1) or as decimal number (1.23).  It only affects the output, if
            the cell value is a floating point number.

          ∑ If the cell is shadowed by its left neighbour.  This  means  that  the
            left neighbour cell additionally uses the room of the shadowed cell.

          ∑ If the cell is locked which prevents to accidentally edit or clear it.
            Note that block operations override this attribute, because  when  you
            deal with blocks, you usually know what you are doing.

          ∑ If  special  characters  for  e.g.  roff  and  LaTeX  should be quoted
            (default) or not.  Not quoting them allows  special  effects  (if  you
            know roff or LaTeX), but is of course not portable.

       [1m7.2  Data Types[0m

       In  teapot,  each  value  has  an associated data type.  The following data
       types exist:

          ∑ empty.  Empty cells have this as value.

          ∑ string.  A string is a  sequence  of  characters  enclosed  by  double
            quotes: [1m"This is a string"[22m.  A double quote can be part of the string,
            if it is quoted using a backslash: [1m"\""[22m.  If you want the backslash to








                                          - 14 -



            appear  in the output instead of quoting the next character, use it to
            quote itself: [1m"\\"[22m.  A single minus character on the  screen  will  be
            output as a minus.  If you want a hyphen character in the output, then
            use two minus characters for that.

          ∑ floating point.  Floating point values are  inexact,  their  precision
            and  range  depends on the implementation of the C type double on your
            system.  An example is: [1m42.0[0m

          ∑ integer.  Integer values are exact, their range depends on the C  type
            long on your system.  An example is: [1m42[0m

          ∑ location.   Cell labels and the [1m&() [22mfunction have this type, but there
            are no location constant literals.

          ∑ error.  Syntactical, semantical  (type  mismatch)  errors  cause  this
            value,  as  well  as division by 0 and the function [1merror()[22m.  An error
            always has an assigned error message.  Functions and  operators,  when
            applied  to  a  value  of the type error, evaluate to just that value.
            That way, the first error which was found deep  inside  a  complicated
            expression will be showed.


       [1m8.  Operators[0m

       Unlike  other  spread sheets, the operators in teapot check the type of the
       values they are applied to, which means the  try  to  add  a  string  to  a
       floating  point  number  will  result  in  an  type  error.   The following
       operators are available, listed in ascending precendence:

       [4mx[24m[1m<[4m[22my[24m  evaluates to 1 if [4mx[24m is less than [4my[24m.  If [4mx[24m or [4my[24m  are  empty,  they  are
            considered  to  be 0 if the other is an integer number, 0.0 if it is a
            floating point number and the empty string if it is a string.

       [4mx[24m[1m<=[4m[22my[24m evaluates to 1 if [4mx[24m is less than or equal  to  [4my[24m.   Empty  values  are
            dealt with as described above.

       [4mx[24m[1m>=[4m[22my[24m evaluates  to  1 if [4mx[24m is greater than or equal to [4my[24m.  Empty values are
            dealt with as described above.

       [4mx[24m[1m>[4m[22my[24m  evaluates to 1 if [4mx[24m is greater than [4my[24m.  Empty values are dealt with as
            described above.

       [4mx[24m[1m==[4m[22my[24m evaluates  to  1  if  [4mx[24m is equal to [4my[24m.  Empty values are dealt with as
            described above.

       [4mx[24m[1m~=[4m[22my[24m evaluates to 1 if the floating point value [4mx[24m is almost to the floating
            point  value  [4my[24m.   Empty  values  are  dealt  with as described above.
            Almost equal means, the numbers are at most neighbours.

       [4mx[24m[1m!=[4m[22my[24m evaluates to 1 if [4mx[24m is not equal to [4my[24m.  Empty values are dealt with as
            described above.










                                          - 15 -



       [4mx[24m[1m+[4m[22my[24m  evaluates  to the sum if [4mx[24m and [4my[24m are numbers.  If [4mx[24m and [4my[24m are strings,
            the result is the concatenated string.  If [4mx[24m or [4my[24m is empty, the result
            is  the other element.  There is no dedicated logical or operation, so
            use [1m+ [22mfor that.

       [4mx[24m[1m-[4m[22my[24m  evaluates to the difference if [4mx[24m and [4my[24m are numbers.  If  [4mx[24m  is  empty,
            the result is [1m-[4m[22my[24m.  If [4my[24m is empty, the result is [4mx[24m.

       [4mx[24m[1m*[4m[22my[24m  evaluates  to the product if [4mx[24m and [4my[24m are numbers.  If [4mx[24m or [4my[24m is empty,
            the result is 0.  There is no dedicated logical and operation, so  use
            [1m* [22mfor that.

       [4mx[24m[1m/[4m[22my[24m  evaluates  to the quotient if [4mx[24m and [4my[24m are numbers.  If [4mx[24m is empty, the
            result is 0.  If [4my[24m is empty, the result is  the  error  ``division  by
            0''.

       [4mx[24m[1m%[4m[22my[24m  evaluates to the remainder of the division if [4mx[24m and [4my[24m are numbers.  If
            [4mx[24m is empty, the result is 0.  If [4my[24m is empty, the result is  the  error
            ``modulo 0''.

       [4mx[24m[1m^[4m[22my[24m  evaluates  to  [4mx[24m to the power of [4my[24m.  If [4mx[24m or [4my[24m are empty, they will be
            considered to be the integer value 0.

       [1m-[4m[22mx[24m   evaluates to [1m-[4m[22mx[24m if [4mx[24m is a number.  If [4mx[24m is empty, the result  will  be
            empty, too.

       [1m([4m[22mexpression[24m[1m)[0m
            evaluates to the expression.

       [4mfunction[24m[1m([4m[22margument[24m[1m,[22m...[1m)[0m
            evaluates to the value of the function applied to the values resulting
            from evaluating the argument expressions.


       [1m9.  Functions[0m

       This section documents all available functions in alphabetical order.   The
       functions  are  given  in  a  C-like  notation,  so use [1m@(0,0,0) [22minstead of
       [1m@(integer 0, integer 0, integer 0)[22m.  If no type is given for the result  of
       a  function,  it  means the result type depends on the arguments.  Brackets
       mark optional arguments.

       [1m@([22m[integer [4mx[24m][[1m,[22m[integer [4my[24m][[1m,[22m[integer [4mz[24m]]][1m)[0m

       [1m@([22mlocation [4ml[24m[1m)[0m
            returns the value of the cell at position [4mx[24m, [4my[24m, [4mz[24m.  If any of [4mx[24m, [4my[24m  or
            [4mz[24m is omitted, the coordinate of the cell is used.

       location [1m&([22m[integer [4mx[24m][[1m, [22m[integer [4my[24m][[1m, [22m[integer [4mz[24m]]][1m)[0m
            returns  a  pointer to the cell at location [4mx[24m, [4my[24m, [4mz[24m.  If [4mz[24m is omitted,
            the [4mz[24m position of the cell is used.  If [4my[24m is missing as  well,  the  [4my[0m
            position (row) of the cell is used.










                                          - 16 -



       string [1m$([22mstring [4menv[24m[1m)[0m
            evaluates  to  the contents of the specified environment variable.  If
            the variable does not exist, then an empty string will be returned.

       float [1mabs([22mfloat [4mx[24m[1m)[0m

       int [1mabs([22mint [4mx[24m[1m)[0m
            evaluates to the absolute value of [4mx[24m.

       float [1macos([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the arc cosine of [4mx[24m, where [4mx[24m is given in radians.

       float [1marcosh([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the arc hyperbolic cosine of  [4mx[24m,  where  [4mx[24m  is  given  in
            radians.

       float [1marsinh([22mdouble|int [4mx[24m[1m)[0m
            evaluates  to  the  arc  hyperbolic  sine  of  [4mx[24m,  where [4mx[24m is given in
            radians.

       float [1martanh([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the arc hyperbolic tangent of [4mx[24m,  where  [4mx[24m  is  given  in
            radians.

       float [1masin([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the arc sine of [4mx[24m, where [4mx[24m is given in radians.

       float [1matan([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the arc tangent of [4mx[24m, where [4mx[24m is given in radians.

       [1mclock([22minteger [4mcondition[24m[1m,[22m[location[[1m,[22mlocation][1m)[0m
            conditionally clocks the specified cell if the condition is not 0.  If
            two locations are given, all cells in that range will be clocked.  The
            return value of clock is empty.

       float [1mcos([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the cosine of [4mx[24m, where [4mx[24m is given in radians.

       float [1mcosh([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the hyperbolic cosine of [4mx[24m, where [4mx[24m is given in radians.

       float [1mdeg2rad([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the degrees that are equivalent to [4mx[24m radians.

       float [1me()[0m
            evaluates to the Euler constant [4me[24m.

       error [1merror([22mstring [4mmessage[24m[1m)[0m
            evaluates to an error with the specified message.

       [1meval([22mlocation[1m)[0m
            evaluates  to  the  value  of  the expression in the cell at the given
            [4mlocation[24m, but evaluated in the context of the cell using [1meval()[22m.  This
            function may not be used nested any deeper than 32 times.








                                          - 17 -



       float [1mfloat([22mstring [4ms[24m[1m)[0m
            converts the given string into a floating point number.

       float [1mfrac([22mfloat [4mx[24m[1m)[0m
            evaluates to the fractional part of [4mx[24m.

       int [1mint([22mfloat [4mx[24m[[1m,[22minteger [4mneg[24m[1m, [22minteger [4mpos[24m][1m)[0m
            converts [4mx[24m to an integer value by cutting off the fractional part.  If
            given, the value of [4mneg[24m and  [4mpos[24m  determines  how  negative  and  non-
            negative numbers will be converted:


                      neg, pos | result
                      ---------+----------------------------------
                       < -1    | next smaller integer value
                          0    | cut fractional part off (default)
                          1    | round upward
                       >  1    | next larger integer value



       int [1mint([22mstring [4ms[24m[1m)[0m
            converts [4ms[24m to an integer number.

       string [1mlen([22mstring [4ms[24m[1m)[0m
            evaluates to the length of [4ms[24m.

       float [1mlog([22mdouble|int [4mx[24m[[1m,[22mdouble|int [4my[24m[1m)[0m
            evaluates  to  the logarithm of [4mx[24m.  If [4my[24m is specified, the result will
            be the natural logarithm, otherwise it will be the  logarithm  to  the
            base of [4my[24m.

       location [1mmax([22mlocation [4ml1[24m[1m, [22mlocation [4ml2[24m[1m)[0m
            evaluates to the maximum in the same way [1mmin [22mdoes for the minimum.

       location [1mmin([22mlocation [4ml1[24m[1m, [22mlocation [4ml2[24m[1m)[0m
            evaluates  to  the  location of the minimum of all values in the block
            marked by the corners pointed to by [4ml1[24m and [4ml2[24m.  Note  that  the  empty
            cell  is  equal  to 0, 0.0 and "", so if the first minimum is an empty
            cell, the result will be a pointer to this cell, too.  If you are  not
            interested  in  the  location of the minimum but the value itself, use
            [1m@(min([4m[22ml1[24m[1m, [4m[22ml2[24m[1m))[22m.

       int [1mn([22mlocation [4ml1[24m[1m, [22mlocation [4ml2[24m[1m)[0m
            evaluates to the number of non-empty cells in the block marked by  the
            corners pointed to by [4ml1[24m and [4ml2[24m.

       [1mpoly([22mfloat|integer [4mx[24m[1m, [22mfloat|integer [4mcn[24m[[1m, [22m...][1m)[0m
            evaluates the polynome [4mcn*xn[24m+...+[4mc0*x0[24m.

       float [1mrad2deg([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the radians that are equivalent to [4mx[24m degrees.










                                          - 18 -



       float [1mrnd()[0m
            evaluates to a pseudo-random number between 0.0 and 1.0.

       float [1msin([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the sine of [4mx[24m, where [4mx[24m is given in radians.

       float [1msinh([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the hyperbolic sine of [4mx[24m, where [4mx[24m is given in radians.

       string [1mstrftime([22mstring [4mf[24m [[1m, [22minteger [4mt[24m])
            evaluates to the time [4mt[24m formatted according to the format specified in
            [4mf[24m. Times in [4mt[24m are counted in seconds since epoch (1970-1-1 0:00). If [4mt[0m
            is empty or 0, the actual time is used.  For the format specifications
            consult the man page  of  your  c  library,  strftime  (3).   Example:
            [4m@(now)=int(strftime("%s"))[24m sets the field with label now to the actual
            time.

       string [1mstring([22mlocation [4ml[24m[1m)[0m

       string [1mstring([22minteger [4mx[24m[1m)[0m

       string [1mstring([22mfloat [4mx[24m[[1m, [22m[integer [4mprecision[24m][[1m, [4m[22mscientific[24m]][1m)[0m
            evaluates to a string containing the current value of the  given  cell
            at  location  [4ml[24m,  or  to the numeric value [4mx[24m with the given [4mprecision[24m.
            The [4mscientific[24m flag determines if decimal (0) or  scientific  (unequal
            0) representation is used.

       int [1mstrptime([22mstring [4mf[24m [1m, [22mstring [4mdatetime[24m)
            evaluates  to  the seconds since epoch (1970-1-1 0:00) of the [4mdatetime[0m
            string, parsed according to the format specified in [4mf[24m.  For the format
            specifications consult the man page of your c library, strptime (3).

       string [1msubstr([22mstring [4ms,[24minteger [4mx,[24minteger [4my[24m[1m)[0m
            evaluates to the substring of [4ms[24m between [4mx[24m and [4my[24m, which start at 0.

       [1msum([22mlocation [4ml1[24m[1m, [22mlocation [4ml2[24m[1m)[0m
            evaluates  to the sum of all values in the block marked by the corners
            pointed to by [4ml1[24m and [4ml2[24m.

       float [1mtan([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the tangent of [4mx[24m, where [4mx[24m is given in radians.

       float [1mtanh([22mdouble|int [4mx[24m[1m)[0m
            evaluates to the hyperbolic tangent of [4mx[24m, where [4mx[24m is given in radians.

       int [1mx([22m[location [4ml[24m][1m)[0m

       int [1my([22m[location [4ml[24m][1m)[0m

       int [1mz([22m[location [4ml[24m][1m)[0m
            evaluate to the [4mx[24m, [4my[24m and [4mz[24m position of  the  given  location,  of  the
            currently  updated cell if none is given.  These functions are usually
            used in combination with the [1m@  [22mfunction  for  relative  relations  to
            other cells.








                                          - 19 -



       [1m10.  Problems and solutions[0m



       [1m10.1  Why is 1.0 unequal 1.0?[0m

       If your machine uses binary floating point arithmetic, and chances are that
       it does, you may eventually find yourself in the following situation:

            0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1

       You expect to see 1.0 as result, and indeed that is what you get.  Now  you
       compare  this  result to the constant 1.0, but surprisingly for many users,
       the result is 0.  Appearantly, 1.0 is unequal 1.0 for teapot.

       This is not a bug in teapot, in fact it is not a bug at all.   The  problem
       is,  that  0.1  (1.0/10.0)  does not have an exact representation in binary
       floating point arithmetic, similar to how 1.0/3.0 does not  have  an  exact
       representation  in  decimal  arithmetic  (or  binary, for that matter).  As
       such, a value very close to 0.1 is used, but when displaying it, it will be
       rounded  to  0.1.   The  result  is  obvious, adding this number which is a
       little different from 0.1 ten times leads to a result very close to but not
       quite  1.0.   Since  it  is  so  close, displaying it rounded to only a few
       digits precision shows 1.0.

       To solve the comparison problem, teapot has the operator [1m~=[22m, which compares
       two  floating  point  values apart from the last significant bit.  Use this
       operator to compare the two values from above and the  result  will  be  1,
       meaning  they  are  about  equal.   Don't assume that a number which can be
       expressed with a finite  number  of  decimal  digits  will  be  represented
       exactly in binary floating point arithmetic.

       [1m10.2  How do I hide intermediate results?[0m

       If  you  used  flat, two-dimensional spread sheets before, you are probably
       used to hidden cells which contain intermediate results, global  constants,
       scratch  areas and the like.  teapot has no way to hide cells, but you have
       three dimensions.  Just use one or more layers for such cells and give each
       cell a label in order to reference and find it easily.

       [1m10.3  Why is there no conditional evaluation?[0m

       There  is  no  special  operator or function for conditional evaluation.  I
       could add one easily, but then next someone would ask for loops and someone
       else  for  user-defined  functions,  variables  and  so  on.  If you need a
       programming language, you know where to find it.

       But don't worry.  :) The answer is, that conditional evaluation  comes  for
       free with teapot's orthogonal cell addressing.  As an example, depending on
       the cell labelled [1mX [22mbeing negative or not, you want the result  to  be  the
       string [1m"BAD [22mor [1m"GOOD"[22m.  This is the solution:

            eval(&((@(X)>=0)+x(BAD),y(BAD),z(BAD)))









                                          - 20 -



       The  cell  labelled  [1mBAD  [22mcontains  the  string  [1m"BAD"[22m, its right neighbour
       contains the string [1m"GOOD"[22m.  If  you  have  nested  conditions,  you  could
       weight  them  with  1,  2,  4 and so on to address a bigger range of cells.
       Alternatively, you could make  use  of  all  three  dimensions  for  nested
       conditions.


       [1m11.  Expression grammar[0m



       [4mdigit[24m                  ::=   [1m0 [22m| .. | [1m9[0m
       [4mhex_digit[24m              ::=   [1m0 [22m| .. | [1m9 [22m| [1ma [22m| .. | [1mf[0m
       [4moctal_digit[24m            ::=   [1m0 [22m| .. | [1m7[0m
       [4mdecimal_integer[24m        ::=   [4mdigit[24m { [4mdigit[24m }
       [4mhex_integer[24m            ::=   [1m0x [4m[22mhex_digit[24m { [4mhexdigit[24m }
       [4moctal_integer[24m          ::=   [1m0 [4m[22moctal_digit[24m { [4moctdigit[24m }
       [4minteger[24m                ::=   [4mdecimal_integer[0m
                                    | [4mhex_integer[0m
                                    | [4moctal_integer[0m
       [4mfloat[24m                  ::=   [4mdigit[24m { [4mdigit[24m } [ [1m. [22m] { [4mdigit[24m }
                                    [ [1me [22m| [1mE [22m[ [1m+ [22m| [1m- [22m] [4mdigit[24m { [4mdigit[24m } ]
       [4mquoted_character[24m       ::=   [1m\ [4m[22many_character[0m
       [4mcharacter[24m              ::=   [4many_character[24m | [4mquoted_character[0m
       [4mstring[24m                 ::=   [1m" [22m{ [4mcharacter[24m } [1m"[0m
       [4midentifier_character[24m   ::=   [1m_ [22m| [1m@ [22m| [1m& [22m| [1m. [22m| [1m$ [22m| [4malpha_character[0m
       [4midentifier[24m             ::=   [4midentifier_character[0m
                                    { [4midentifier_character[24m | [4mdigit[24m }
       [4mfunction[24m               ::=   [4midentifier[24m [1m( [22m[ [4mterm[24m ] { [1m, [22m[ [4mterm[24m ] } [1m)[0m
       [4mlabel[24m                  ::=   [4midentifier[0m
       [4mparenterm[24m              ::=   [1m( [4m[22mterm[24m [1m)[0m
       [4mnegterm[24m                ::=   [1m- [4m[22mprimary[0m
       [4mprimary[24m                ::=   [4mfunction[24m | [4mlabel[24m | [4mparenterm[24m | [4mnegterm[0m
       [4mpowterm[24m                ::=   [4mprimary[24m { [1m^ [4m[22mprimary[24m }
       [4mmathterm[24m               ::=   [4mpowterm[24m { [1m/ [22m| [1m* [22m| [1m% [4m[22mpowterm[24m }
       [4mfactor[24m                 ::=   [4mmathterm[24m { [1m+ [22m| [1m- [4m[22mmathterm[24m }
       [4mterm[24m                   ::=   [4mfactor[24m {[1m< [22m| [1m<= [22m| [1m>= [22m| [1m> [22m| [1m== [22m| [1m!= [4m[22mfactor[24m }






















